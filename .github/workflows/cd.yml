name: Deploy SAM Application

on:
  push:
    branches:
      - main
    paths:
      - 'sam-app/**'
      - '.github/workflows/cd.yml'

permissions:
  id-token: write # Required for OIDC authentication with AWS
  contents: read  # Required to check out the repository

jobs:
  deploy:
    name: Build and Deploy SAM App
    runs-on: ubuntu-latest
    environment: production # Optional: for environment-specific secrets and rules

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # GitHub Secret: ARN of the IAM role for deployment
          aws-region: ${{ secrets.AWS_REGION }}             # GitHub Secret: e.g., ap-northeast-1

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build SAM application
        run: sam build --use-container
        working-directory: ./sam-app

      - name: Deploy SAM application
        id: sam_deploy
        run: >
          sam deploy
          --no-confirm-changeset
          --no-fail-on-empty-changeset
          --stack-name ${{ secrets.PROJECT_NAME }}-sam-app
          --parameter-overrides
            ProjectName=${{ secrets.PROJECT_NAME }}
            S3BucketName=${{ secrets.S3_BUCKET_NAME }}
            DynamoDBTableName=${{ secrets.DYNAMODB_TABLE_NAME }}
            CognitoUserPoolId=${{ secrets.COGNITO_USER_POOL_ID }}
            CognitoAppClientId=${{ secrets.COGNITO_APP_CLIENT_ID }}
          --capabilities CAPABILITY_IAM
        working-directory: ./sam-app

      - name: Update Step Function with Lambda ARN
        env:
          STATE_MACHINE_ARN: ${{ secrets.STATE_MACHINE_ARN }}
        run: |
          # Get the function name from the SAM stack outputs
          FUNCTION_NAME=$(aws cloudformation describe-stacks --stack-name ${{ secrets.PROJECT_NAME }}-sam-app --query "Stacks[0].Outputs[?OutputKey=='ProcessEventFunctionName'].OutputValue" --output text)

          if [ -z "$FUNCTION_NAME" ]; then
            echo "Error: Could not find ProcessEventFunctionName in stack outputs."
            exit 1
          fi

          # Get the full function ARN
          FUNCTION_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query "Configuration.FunctionArn" --output text)

          if [ -z "$FUNCTION_ARN" ]; then
            echo "Error: Could not get ARN for function $FUNCTION_NAME."
            exit 1
          fi

          echo "Updating State Machine with Function ARN: $FUNCTION_ARN"

          # Get the current state machine definition
          DEFINITION=$(aws stepfunctions describe-state-machine --state-machine-arn $STATE_MACHINE_ARN --query "definition" --output text)

          # Replace the placeholder with the actual ARN
          NEW_DEFINITION=$(echo "$DEFINITION" | sed "s|PLEASE_UPDATE_VIA_CD_PIPELINE|$FUNCTION_ARN|g")

          # Update the state machine
          aws stepfunctions update-state-machine --state-machine-arn $STATE_MACHINE_ARN --definition "$NEW_DEFINITION"

          echo "State machine updated successfully."